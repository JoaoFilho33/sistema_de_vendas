// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using trabalho_final.Models;

#nullable disable

namespace pagamentoProduto.Migrations
{
    [DbContext(typeof(MyDbContext))]
    [Migration("20231214023654_AdicionarPagamentoComCartaoEComCheque")]
    partial class AdicionarPagamentoComCartaoEComCheque
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("trabalho_final.Models.Cliente", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Cliente");
                });

            modelBuilder.Entity("trabalho_final.Models.Item", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("Percentual")
                        .HasColumnType("int");

                    b.Property<double>("Preco")
                        .HasColumnType("double");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Item");
                });

            modelBuilder.Entity("trabalho_final.Models.Marca", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .HasColumnType("longtext");

                    b.Property<string>("Nome")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Marca");
                });

            modelBuilder.Entity("trabalho_final.Models.NotaDeVenda", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("ClienteNotaId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Data")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("PagamentoNotaId")
                        .HasColumnType("int");

                    b.Property<bool>("Tipo")
                        .HasColumnType("tinyint(1)");

                    b.Property<int?>("TipoPagamentoNotaId")
                        .HasColumnType("int");

                    b.Property<int?>("TransportadoraNotaId")
                        .HasColumnType("int");

                    b.Property<int?>("VendedorNotaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ClienteNotaId");

                    b.HasIndex("PagamentoNotaId");

                    b.HasIndex("TipoPagamentoNotaId");

                    b.HasIndex("TransportadoraNotaId");

                    b.HasIndex("VendedorNotaId");

                    b.ToTable("NotaDeVenda");
                });

            modelBuilder.Entity("trabalho_final.Models.Pagamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DataLimite")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("Pago")
                        .HasColumnType("tinyint(1)");

                    b.Property<double>("Valor")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.ToTable("Pagamento");
                });

            modelBuilder.Entity("trabalho_final.Models.Produto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Descricao")
                        .HasColumnType("longtext");

                    b.Property<int?>("ItemId")
                        .HasColumnType("int");

                    b.Property<int?>("MarcaProdutoId")
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .HasColumnType("longtext");

                    b.Property<double>("Preco")
                        .HasColumnType("double");

                    b.Property<int>("Quantidade")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ItemId");

                    b.HasIndex("MarcaProdutoId");

                    b.ToTable("Produto");
                });

            modelBuilder.Entity("trabalho_final.Models.TipoPagamento", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("InformacoesAdicionais")
                        .HasColumnType("longtext");

                    b.Property<string>("NomeDoCobrado")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("TipoPagamento");

                    b.HasDiscriminator<string>("Discriminator").HasValue("TipoPagamento");
                });

            modelBuilder.Entity("trabalho_final.Models.Transportadora", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Transportadora");
                });

            modelBuilder.Entity("trabalho_final.Models.Vendedor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Nome")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("Vendedor");
                });

            modelBuilder.Entity("trabalho_final.Models.PagamentoComCartao", b =>
                {
                    b.HasBaseType("trabalho_final.Models.TipoPagamento");

                    b.Property<string>("Bandeira")
                        .HasColumnType("longtext");

                    b.Property<string>("NumeroDoCartao")
                        .HasColumnType("longtext");

                    b.HasDiscriminator().HasValue("PagamentoComCartao");
                });

            modelBuilder.Entity("trabalho_final.Models.NotaDeVenda", b =>
                {
                    b.HasOne("trabalho_final.Models.Cliente", "ClienteNota")
                        .WithMany()
                        .HasForeignKey("ClienteNotaId");

                    b.HasOne("trabalho_final.Models.Pagamento", "PagamentoNota")
                        .WithMany()
                        .HasForeignKey("PagamentoNotaId");

                    b.HasOne("trabalho_final.Models.TipoPagamento", "TipoPagamentoNota")
                        .WithMany()
                        .HasForeignKey("TipoPagamentoNotaId");

                    b.HasOne("trabalho_final.Models.Transportadora", "TransportadoraNota")
                        .WithMany()
                        .HasForeignKey("TransportadoraNotaId");

                    b.HasOne("trabalho_final.Models.Vendedor", "VendedorNota")
                        .WithMany()
                        .HasForeignKey("VendedorNotaId");

                    b.Navigation("ClienteNota");

                    b.Navigation("PagamentoNota");

                    b.Navigation("TipoPagamentoNota");

                    b.Navigation("TransportadoraNota");

                    b.Navigation("VendedorNota");
                });

            modelBuilder.Entity("trabalho_final.Models.Produto", b =>
                {
                    b.HasOne("trabalho_final.Models.Item", null)
                        .WithMany("Produtos")
                        .HasForeignKey("ItemId");

                    b.HasOne("trabalho_final.Models.Marca", "MarcaProduto")
                        .WithMany()
                        .HasForeignKey("MarcaProdutoId");

                    b.Navigation("MarcaProduto");
                });

            modelBuilder.Entity("trabalho_final.Models.Item", b =>
                {
                    b.Navigation("Produtos");
                });
#pragma warning restore 612, 618
        }
    }
}
